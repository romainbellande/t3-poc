---
description: Guidelines for creating conventional commit messages.
globs: 
alwaysApply: false
---
# Commit message guidelines

- When I send you `commit` command, you always execute a `get diff --staged -- . ':(exclude)package-lock.json' | cat` to get the diff and generate a concise and clear commit message following the Conventional Commits specification.
- The message should include a type, an optional scope, and a subject.
- Use one of the following types: feat, fix, docs, style, refactor, test, chore, or perf.
- If applicable, include a scope in parentheses to describe the part of the codebase affected.
- The subject should be a brief, imperative description of the change.
- Each line must not exceed 60 characters.
- For multi-line commit messages, use multiple `-m` flags in the command, one for each line.
- Never include raw newlines in commands - always use the `-m` flag approach.
- After commiting, if there is a lint rule issue and your perform changes to fix the issue, always execute a `git add .` command after applying your changes

Example Input:

"commit"

Example Output for single-line commit:
```
feat: add user authentication system
```

Example Output for multi-line commit:
```
feat(auth): implement OAuth provider integration

- Add Google OAuth provider setup
- Configure authentication callbacks
- Implement user session management
- Add protected route middleware
```

Note: When executing the actual commit command, the multi-line message should be formatted using multiple -m flags like:
git commit -m "feat(auth): implement OAuth provider integration" -m "- Add Google OAuth provider setup" -m "- Configure authentication callbacks" ...